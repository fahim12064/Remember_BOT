import os
import json
import requests
import time

# --- Configuration ---
USER_IDS_FILE = "user_ids.json"
# ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
TELEGRAM_BOT_TOKEN = os.getenv("YOUR_TELEGRAM_BOT_TOKEN", "‡¶è‡¶ñ‡¶æ‡¶®‡ßá_‡¶Ü‡¶™‡¶®‡¶æ‡¶∞_‡¶ü‡ßã‡¶ï‡ßá‡¶®_‡¶¶‡¶ø‡¶®")


# --- Utility Functions ---

def load_user_ids():
    """user_ids.json ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ Chat ID ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡•§"""
    if not os.path.exists(USER_IDS_FILE):
        return set()
    try:
        with open(USER_IDS_FILE, "r") as f:
            content = f.read()
            if not content:
                return set()
            return set(json.loads(content))
    except (FileNotFoundError, json.JSONDecodeError):
        return set()


def save_user_ids(user_ids):
    """‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ Chat ID ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßá user_ids.json ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡•§"""
    with open(USER_IDS_FILE, "w") as f:
        json.dump(list(user_ids), f, indent=2)


def handle_new_users():
    """‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡•§"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå Telegram Bot Token is not set.")
        return

    # ‡¶∂‡ßá‡¶∑ update_id ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶á‡¶≤
    last_update_file = "last_update_id.txt"
    last_update_id = 0
    if os.path.exists(last_update_file):
        with open(last_update_file, "r") as f:
            try:
                last_update_id = int(f.read().strip())
            except ValueError:
                last_update_id = 0

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates?offset={last_update_id + 1}&timeout=5"

    try:
        response = requests.get(url, timeout=10)
        updates = response.json().get("result", [])

        if not updates:
            return  # ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶®‡ßá‡¶á

        user_ids = load_user_ids()
        new_users_found = False

        for update in updates:
            if "message" in update and "text" in update["message"]:
                chat_id = update["message"]["chat"]["id"]
                text = update["message"]["text"]
                first_name = update["message"]["from"].get("first_name", "User")

                if text == "/start":
                    if chat_id not in user_ids:
                        user_ids.add(chat_id)
                        new_users_found = True
                        print(f"‚úÖ New user registered: {chat_id} ({first_name})")

                        # ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ
                        welcome_message = f"Welcome, {first_name}! I will now remind you to study every 2 minutes."
                        send_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
                        payload = {"chat_id": chat_id, "text": welcome_message}
                        requests.post(send_url, json=payload, timeout=10)

            last_update_id = update["update_id"]

        if new_users_found:
            save_user_ids(user_ids)

        with open(last_update_file, "w") as f:
            f.write(str(last_update_id))

    except Exception as e:
        print(f"‚ùå Error checking Telegram updates: {e}")


def send_reminders():
    """‡¶∏‡¶ï‡¶≤ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡ßü‡•§"""
    user_ids = load_user_ids()
    if not user_ids:
        print("ü§∑ No users to remind.")
        return

    print(f"‚úâÔ∏è Sending reminders to {len(user_ids)} user(s)...")
    message = "GO and STUDY"
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"

    for chat_id in user_ids:
        try:
            payload = {"chat_id": chat_id, "text": message}
            requests.post(url, json=payload, timeout=10)
            print(f"    ‚úÖ Reminder sent to {chat_id}")
        except Exception as e:
            print(f"    ‚ùå Failed to send reminder to {chat_id}: {e}")
        time.sleep(1)  # ‡¶∞‡ßá‡¶ü ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç ‡¶è‡ßú‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ßß ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶¨‡¶ø‡¶∞‡¶§‡¶ø


# --- Main Loop ---
if __name__ == "__main__":
    print("--- Study Buddy Bot Started ---")
    while True:
        print("\n--- Running Cycle ---")
        # ‡¶ß‡¶æ‡¶™ ‡ßß: ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶ö‡ßá‡¶ï ‡¶ì ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
        print("STEP 1: Checking for new users...")
        handle_new_users()

        # ‡¶ß‡¶æ‡¶™ ‡ß®: ‡¶∏‡¶ï‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
        print("\nSTEP 2: Sending reminders...")
        send_reminders()

        # ‡¶ß‡¶æ‡¶™ ‡ß©: ‡ß® ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ
        print("\n--- Cycle complete. Waiting for 2 minutes... ---")
        time.sleep(120)

